// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mimetypechecker.actions;

import java.io.IOException;
import java.io.InputStream;
import org.apache.tika.detect.DefaultDetector;
import org.apache.tika.detect.Detector;
import org.apache.tika.io.TikaInputStream;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.metadata.TikaCoreProperties;
import org.apache.tika.mime.MediaType;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class GetMimeType extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __File;
	private system.proxies.FileDocument File;

	public GetMimeType(IContext context, IMendixObject File)
	{
		super(context);
		this.__File = File;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.File = this.__File == null ? null : system.proxies.FileDocument.initialize(getContext(), __File);

		// BEGIN USER CODE
		IContext context = this.context();
		String mimeType = null;

		if (this.File != null && this.File.getHasContents(context)) {
		    try (InputStream inputStream = Core.getFileDocumentContent(context, this.File.getMendixObject())) {
		        TikaInputStream tikaInputStream = TikaInputStream.get(inputStream);
		        Detector detector = new DefaultDetector();
		        Metadata metadata = new Metadata();
		        metadata.set(TikaCoreProperties.RESOURCE_NAME_KEY, this.File.getName());
		        MediaType mediaType = detector.detect(tikaInputStream, metadata);
		        mimeType = mediaType.toString();
		    } catch (IOException e) {
		        // Handle the IOException (e.g., log or throw a more specific exception)
		        throw new Exception("Error reading file content: " + e.getMessage(), e);
		    } catch (Exception e) {
		        // Handle other exceptions (e.g., log or throw a more specific exception)
		        throw new Exception("Error detecting MIME type: " + e.getMessage(), e);
		    }
		} else {
		    // Log or throw a specific exception for an empty file
		    throw new NullPointerException("File is empty or has no content");
		}

		return mimeType;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetMimeType";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
